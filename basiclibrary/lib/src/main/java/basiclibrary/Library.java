/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package basiclibrary;

import java.util.*;

public class Library {
    public int[] rollDice(int n) {
        Random rand = new Random();
        int[] res = new int[n];
        int i = 0;
        while (i < n) {
            int roll = rand.nextInt(6) + 1;
            res[i] = roll;
            i += 1;
        }
        return res;
    }

    public boolean containsDuplicates(Integer[] arr) {
        return new HashSet<>(Arrays.asList(arr)).size() != arr.length;
    }

    public boolean containsDuplicates2(int[] arr) { //brute force
        for (int i = 0; i < arr.length; i++) {
            for (int j = i + 1; j < arr.length; j++) {
                if (arr[i] == arr[j]) return true;
            }
        }
        return false;
    }

    public float calculateAverage(int[] arr) {
        float sum = 0f;
        for (int t : arr) {
            sum += t;
        }
        return sum / arr.length;
    }

    public int arrayOfArrays(int[][] arr2d) {
        float lowestAvg = calculateAverage(arr2d[0]);
        int res = 0;
        for (int i = 1; i < arr2d.length; i++) {
            float avg = calculateAverage(arr2d[i]);
            if (avg < lowestAvg) {
                lowestAvg = avg;
                res = i;
            }
        }
        return res;
    }

    public String checkWeatherData(int[][] data) {
        HashSet<Integer> output = new HashSet<>();
        StringBuilder res;
        int minTemp = data[0][1];
        int maxTemp = data[0][1];
        System.out.println(minTemp + " " + maxTemp);
        for (int[] week : data) {
            for (int day : week) {
                output.add(day);
                if (day > maxTemp) maxTemp = day;
                if (day < minTemp) minTemp = day;
            }
//            System.out.println(output);
        }
        res = new StringBuilder("High: " + maxTemp + "\n" + "Low: " + maxTemp + "\n");
        for (int i = minTemp; i <= maxTemp; i++) {
            if (!output.contains(i)) {
                res.append("Never saw temperature: ").append(i).append("\n");
            }
        }
        return res.toString();
    }

    public String tally(List<String> votes) {
        HashMap<String, Integer> voteCount = new HashMap<>();
        int highCount = 0;
        String winner ="";
        for (String vote : votes) {
//            voteCount.computeIfPresent(vote,(k,v)-> v+1);
            if (voteCount.containsKey(vote)) {
                voteCount.put(vote, voteCount.get(vote) + 1);
                if(voteCount.get(vote)>highCount){
                    highCount = voteCount.get(vote);
                    winner = vote;
                }
            } else {
                voteCount.put(vote, 1);
            }

        }
        System.out.println(winner);
        return winner;

    }
}

